<% content_for(:intro) do %>
<h1>How to tag R scripts for CRdata </h1>
<h2>Introduction</h2>
<p>CRdata will automatically pass input values that the user specifies to your R script. But you need to tell CRdata what outputs to present to the user. To do this, you need to insert HTML/XML style 'tags' that mark the beginning and end of output commands in your code. You will also need to removed (comment out) commands relating to control of graphics devices.</p>
<p>N.B. CRdata instrumentation tags are prefixed with '#" (used for comments in R). So an R script instrumented for CRdata can run outside of CRdata with without errors.</p>
<% end -%>

<% content_for(:content) do %>
 
<h3>Preparing your script for CRdata</h3>
<ul class="bullet_list"><li>Remove all code relating to control of graphics devices (e.g. dev.new, dev.off, windows, X11).</li>
<li>If your code refers to other R scripts (e.g. functions), include the relevant code within the submitted script.</li>
<li>All R and BioConductor packages are pre-installed in CRdata. Do not re-install packages within your code.</li>
<li>If you need to use an unpublished package, follow <these instructions>.</li>
<li>Ensure that all functions called within your script are either part of an installed package, or included within the script.</li>
<li>If you intend to make you script available to Guest Users, make sure your script does not attempt to save any internal variables.  
<p>- Files in the Guest User directory may be deleted without notice. <br />
- Registered users can save interval variables (R objects) for later use (e.g. in a data processing pipeline).</p></li>
<li>CRdata's free processor queue currently only runs Unix processing nodes. Windows-specific R commands (e.g. to read Excel worksheets) will not work on CRdata. 
<p>- You can purchase EC2 Windows worker nodes and use them with CRdata. <br />
- If there is enough demand (and funding!) we will be happy to add Windows nodes to our free service.</p></li></ul>

<h2>Required tags</h2>

<p><strong><em>crdata_object</em></strong> - used to display the values of output variables (R objects)  in the CRdata HTML report. If 'some_object' is your variable of interest, the syntax is: </p>
<code>#&lt;crdata_object&gt;some_object&lt;/crdata_object&gt;</code> 

<p><strong>crdata_image</strong> - this is used to denote any graphical output by your script. Simply enclose all code relating to each output image in the following way:</p>
<code>#&lt;crdata_image&gt;</code>
<p>... your graphics command...such as plot, lines, etc... </p>
<code>#&lt;/crdata_image&gt;</code>

<h2>Optional tags for annotating and formatting CRdata HTML output </h2>

<p><strong>crdata_title</strong> - this inserts a HEADER in your HTML output. The syntax is: </p>
<code>#&lt;crdata_title&gt;some_stuff&lt;/crdata_title&gt; </code>

<p>crdata_text - this is used to insert explanatory text (e.g. figure cations) in your HTML output. The syntax is: </p>
<code>#&lt;crdata_text&gt;some_text&lt;/crdata_text&gt; </code>

<p><strong>crdata_section</strong> - this is used to draw a HORIZONTAL SEPARATOR line in HTML output (similar ito &lt;hr&gt; in HTML). The syntax is:  </p>
<code>#&lt;crdata_section/&gt; </code>

<p><code>crdata_empty_line</code> - this is used to insert an empty line break in HTML output (similar to &lt;br&gt; in HTML). The syntax is: </p>
<code>#&lt;crdata_empty_line/&gt; </code>

<h3>CRdata tagged code example </h3>
<code>#&lt;crdata_title&gt;This is my CRdata run report&lt;/crdata_title&gt; <br>
# sample code here <br>
tmp &lt;- as.data.frame(matrix(rnorm(100),ncol=10)) <br>
summary(tmp) <br>
#&lt;crdata_object&gt;tmp&lt;/crdata_object&gt;  <br>
#&lt;crdata_section/&gt; <br>
#&lt;crdata_image caption="Sample discrete distribution plot"&gt; <br>
plot(tmp) <br>
#&lt;/crdata_image&gt; </code>
  
<h2>Example of how CRdata processes tagged R code</h2> 
<p>Behind the scenes, CRdata replaces tagged code with R2HTML commands that allow it to generate HTML output.</p>
<p>N.B. The text in red is inserted automatically into all scripts. </p>

<code>library("R2HTML") 
crdata_target &lt;- HTMLInitFile(getwd(), filename="index") </code>
<p><span>#&lt;crdata_title&gt;This is brand new CRDATA run report&lt;/crdata_title&gt;</span> is replaced with: </p>
<code>HTML(as.title("This is brand new CRDATA run report"),file=crdata_target) </code>
<p><span>#&lt;crdata_object&gt;tmp&lt;/crdata_object&gt;</span> is replaced with: </p>
<code>HTML(tmp, file=crdata_target) </code>
<p>#&lt;crdata_section/&gt; is replaced with: </p>
<code>HTML("&lt;hr&gt;", file=crdata_target) <br>
#&lt;crdata_empty_line/&gt; <br>
HTML("&lt;br&gt;", file=crdata_target) </code>
<p><span>#&lt;crdata_text&gt;some_text&lt;/crdata_text&gt;</span> is replaced with: </p>
<code>HTML("some text", file=crdata_target) </code>
<p><span>#&lt;crdata_image caption="some caption"&gt;</span> is replaced with:</p>
<code>png(file.path(getwd(),"some_random_uuid.png")) </code>
<p><span>#&lt;/crdata_image&gt;</span> is replaced with:</p>
<code>dev.off() 
HTMLInsertGraph("some_random_uuid.png", file= crdata_target,caption="some caption") <br>
HTMLEndFile()</code>

<h2>Example of tagged R code after processing by CRdata </h2>
<p>After applying the above rules to the example tagged example code, we get the following executable:</p>

<code>library("R2HTML") <br>
HTML(as.title("This is brand new CRDATA run report"),file=crdata_target) <br>
tmp &lt;- as.data.frame(matrix(rnorm(100),ncol=10)) <br>
summary(tmp) <br>
HTML(tmp, file=crdata_target) <br>
png(file.path(getwd(),"some_random_uuid.png")) <br>
plot(tmp) <br>
dev.off() <br>
HTMLInsertGraph("some_random_uuid.png", file=crdata_target, caption="Sample discrete distribution plot") <br>
HTMLEndFile()</code>

<% end -%>